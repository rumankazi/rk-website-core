name: Release

on:
  push:
    branches:
      - main
  workflow_dispatch:
    inputs:
      dry_run:
        description: 'Run semantic-release in dry-run mode'
        required: false
        default: false
        type: boolean

# Cancel in-progress runs for the same workflow on the same ref
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  NODE_VERSION: '20'
  PNPM_VERSION: 'latest'

jobs:
  # Quality gate check - ensure all checks pass before release
  quality-gate:
    name: Quality Gate Check
    runs-on: ubuntu-latest
    outputs:
      can-release: ${{ steps.check.outputs.can-release }}
    steps:
      - name: Get latest workflow run
        id: workflow
        uses: actions/github-script@v7
        with:
          script: |
            const { data: runs } = await github.rest.actions.listWorkflowRuns({
              owner: context.repo.owner,
              repo: context.repo.repo,
              workflow_id: 'quality.yml',
              branch: context.ref.replace('refs/heads/', ''),
              status: 'completed',
              per_page: 1
            });

            const latestRun = runs.workflow_runs[0];
            if (!latestRun) {
              console.log('No completed quality workflow runs found');
              return { conclusion: 'skipped' };
            }

            console.log(`Latest quality run: ${latestRun.conclusion} (${latestRun.html_url})`);
            return { conclusion: latestRun.conclusion };

      - name: Check quality gate status
        id: check
        run: |
          conclusion="${{ fromJson(steps.workflow.outputs.result).conclusion }}"
          if [[ "$conclusion" == "success" ]]; then
            echo "✅ Quality gate passed"
            echo "can-release=true" >> $GITHUB_OUTPUT
          else
            echo "❌ Quality gate failed or not run: $conclusion"
            echo "can-release=false" >> $GITHUB_OUTPUT
          fi

  # Main release job
  release:
    name: Semantic Release
    runs-on: ubuntu-latest
    needs: quality-gate
    if: needs.quality-gate.outputs.can-release == 'true'
    permissions:
      contents: write
      issues: write
      pull-requests: write
      id-token: write
    outputs:
      new-release-published: ${{ steps.semantic-release.outputs.new-release-published }}
      new-release-version: ${{ steps.semantic-release.outputs.new-release-version }}
      new-release-channel: ${{ steps.semantic-release.outputs.new-release-channel }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'
          cache-dependency-path: 'pnpm-lock.yaml'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Verify build
        run: |
          pnpm prisma generate
          pnpm build

      - name: Run semantic-release (dry-run)
        if: ${{ github.event.inputs.dry_run == 'true' }}
        run: pnpm semantic-release:dry-run
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Run semantic-release
        id: semantic-release
        if: ${{ github.event.inputs.dry_run != 'true' }}
        run: pnpm semantic-release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Summary
        if: steps.semantic-release.outputs.new-release-published == 'true'
        run: |
          echo "🎉 **New Release Published!**" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- **Version**: ${{ steps.semantic-release.outputs.new-release-version }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Channel**: ${{ steps.semantic-release.outputs.new-release-channel || 'latest' }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Commit**: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "🔗 [View Release](https://github.com/${{ github.repository }}/releases/tag/v${{ steps.semantic-release.outputs.new-release-version }})" >> $GITHUB_STEP_SUMMARY

  # Optional: Trigger deployment workflows
  deploy-notification:
    name: Deployment Notification
    runs-on: ubuntu-latest
    needs: release
    if: needs.release.outputs.new-release-published == 'true'
    steps:
      - name: Notify deployment systems
        run: |
          echo "🚀 New release v${{ needs.release.outputs.new-release-version }} is ready for deployment"
          echo "This is where you would trigger deployment workflows or notifications"

          # Example: Trigger deployment workflow
          # gh workflow run deploy.yml \
          #   --field version="${{ needs.release.outputs.new-release-version }}" \
          #   --field environment="staging"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # Skip release notification
  skip-release:
    name: No Release Needed
    runs-on: ubuntu-latest
    needs: [quality-gate, release]
    if: always() && (needs.quality-gate.outputs.can-release != 'true' || needs.release.outputs.new-release-published != 'true')
    steps:
      - name: No release summary
        run: |
          if [[ "${{ needs.quality-gate.outputs.can-release }}" != "true" ]]; then
            echo "⏸️ **Release Skipped**: Quality gate did not pass" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "Please ensure all quality checks pass before releasing." >> $GITHUB_STEP_SUMMARY
          else
            echo "ℹ️ **No New Release**: No releasable changes detected" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "This usually means:" >> $GITHUB_STEP_SUMMARY
            echo "- No conventional commits since last release" >> $GITHUB_STEP_SUMMARY
            echo "- Only non-release changes (chore, style, etc.)" >> $GITHUB_STEP_SUMMARY
            echo "- All changes were already released" >> $GITHUB_STEP_SUMMARY
          fi
