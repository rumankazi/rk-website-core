name: Dependabot Auto-Merge & Release

on:
  pull_request:
    types: [opened, synchronize, reopened, ready_for_review]

permissions:
  contents: write
  pull-requests: write
  actions: read
  checks: read
  issues: write # For label creation

env:
  # Define semantic versioning strategy
  PATCH_PACKAGES: |
    @types/node @types/react @types/react-dom
    prettier eslint typescript
    @testing-library/react @testing-library/jest-dom @testing-library/user-event
    @vitest/coverage-v8
  MINOR_PACKAGES: |
    tailwindcss autoprefixer postcss
    vitest playwright
    next react react-dom
  MAJOR_PACKAGES: |
    prisma @prisma/client
    auth.js next-auth

jobs:
  # Setup and validation job
  setup:
    runs-on: ubuntu-latest
    if: github.actor == 'dependabot[bot]'
    outputs:
      update-type: ${{ steps.metadata.outputs.update-type }}
      dependency-names: ${{ steps.metadata.outputs.dependency-names }}
      dependency-type: ${{ steps.metadata.outputs.dependency-type }}
      previous-version: ${{ steps.metadata.outputs.previous-version }}
      new-version: ${{ steps.metadata.outputs.new-version }}
      alert-state: ${{ steps.metadata.outputs.alert-state }}
      cvss: ${{ steps.metadata.outputs.cvss }}
      release-type: ${{ steps.determine-release.outputs.release-type }}
      should-auto-merge: ${{ steps.determine-release.outputs.should-auto-merge }}
    steps:
      - name: Fetch Dependabot metadata
        id: metadata
        uses: dependabot/fetch-metadata@v2
        with:
          github-token: '${{ secrets.GITHUB_TOKEN }}'

      - name: Determine semantic release type
        id: determine-release
        run: |
          update_type="${{ steps.metadata.outputs.update-type }}"
          dependency_name="${{ steps.metadata.outputs.dependency-names }}"
          dependency_type="${{ steps.metadata.outputs.dependency-type }}"
          alert_state="${{ steps.metadata.outputs.alert-state }}"

          # Determine release type based on package importance and update type
          if [[ "$alert_state" == "OPEN" ]]; then
            release_type="security"
            should_auto_merge="false"  # Security updates need review
          elif [[ "$update_type" == "version-update:semver-major" ]]; then
            if echo "$MAJOR_PACKAGES" | grep -q "$dependency_name"; then
              release_type="major"
              should_auto_merge="false"
            else
              release_type="minor"  # Treat non-critical major as minor
              should_auto_merge="true"
            fi
          elif [[ "$update_type" == "version-update:semver-minor" ]]; then
            if echo "$MINOR_PACKAGES" | grep -q "$dependency_name"; then
              release_type="minor"
              should_auto_merge="true"
            else
              release_type="patch"  # Treat non-critical minor as patch
              should_auto_merge="true"
            fi
          else
            release_type="patch"
            should_auto_merge="true"
          fi

          echo "release-type=$release_type" >> $GITHUB_OUTPUT
          echo "should-auto-merge=$should_auto_merge" >> $GITHUB_OUTPUT

          echo "üìä Release Analysis:"
          echo "  - Update Type: $update_type"
          echo "  - Dependency: $dependency_name"
          echo "  - Semantic Release Type: $release_type"
          echo "  - Should Auto-merge: $should_auto_merge"

  # Label management and setup
  manage-labels:
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - name: Create required labels if they don't exist
        run: |
          # Define labels with colors
          declare -A labels=(
            ["dependencies"]="0366d6"
            ["security"]="d73a4a"
            ["major-update"]="b60205"
            ["minor-update"]="fbca04"
            ["patch-update"]="0e8a16"
            ["auto-mergeable"]="1d76db"
            ["needs-review"]="d876e3"
            ["priority-high"]="d73a4a"
            ["automated"]="7b68ee"
            ["semver:major"]="b60205"
            ["semver:minor"]="fbca04"
            ["semver:patch"]="0e8a16"
          )

          for label in "${!labels[@]}"; do
            color="${labels[$label]}"
            if ! gh label list --json name --jq '.[].name' | grep -q "^$label$"; then
              echo "Creating label: $label"
              gh label create "$label" --color "$color" --description "Auto-generated label for dependency management" || true
            else
              echo "Label already exists: $label"
            fi
          done
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # Main processing job
  process-update:
    runs-on: ubuntu-latest
    needs: [setup, manage-labels]
    steps:
      - name: Apply semantic versioning labels
        run: |
          release_type="${{ needs.setup.outputs.release-type }}"
          dependency_name="${{ needs.setup.outputs.dependency-names }}"
          update_type="${{ needs.setup.outputs.update-type }}"

          # Base labels
          gh pr edit "$PR_URL" --add-label "dependencies" --add-label "automated"

          # Semantic version labels
          case "$release_type" in
            "major")
              gh pr edit "$PR_URL" --add-label "semver:major" --add-label "major-update" --add-label "needs-review"
              ;;
            "minor")
              gh pr edit "$PR_URL" --add-label "semver:minor" --add-label "minor-update"
              ;;
            "patch")
              gh pr edit "$PR_URL" --add-label "semver:patch" --add-label "patch-update" --add-label "auto-mergeable"
              ;;
            "security")
              gh pr edit "$PR_URL" --add-label "security" --add-label "priority-high" --add-label "needs-review"
              ;;
          esac
        env:
          PR_URL: ${{ github.event.pull_request.html_url }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Auto-approve safe updates
        if: needs.setup.outputs.should-auto-merge == 'true'
        run: |
          gh pr review --approve "$PR_URL" --body "‚úÖ **Auto-approved**

          This dependency update has been automatically approved based on semantic versioning rules:
          - **Release Type**: ${{ needs.setup.outputs.release-type }}
          - **Package**: ${{ needs.setup.outputs.dependency-names }}
          - **Version**: ${{ needs.setup.outputs.previous-version }} ‚Üí ${{ needs.setup.outputs.new-version }}

          Auto-merge will proceed after CI checks pass."
        env:
          PR_URL: ${{ github.event.pull_request.html_url }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Comment on security updates
        if: needs.setup.outputs.alert-state == 'OPEN'
        run: |
          gh pr comment "$PR_URL" --body "üîí **Security Update Detected**

          This PR addresses a security vulnerability:
          - **Package**: ${{ needs.setup.outputs.dependency-names }}
          - **Alert State**: ${{ needs.setup.outputs.alert-state }}
          - **CVSS Score**: ${{ needs.setup.outputs.cvss }}
          - **Semantic Release Type**: ${{ needs.setup.outputs.release-type }}

          **Required**: Manual review and approval before merging."
        env:
          PR_URL: ${{ github.event.pull_request.html_url }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Request review for major updates
        if: needs.setup.outputs.release-type == 'major'
        run: |
          gh pr edit "$PR_URL" --add-reviewer "rumankazi"
          gh pr comment "$PR_URL" --body "‚ö†Ô∏è **Major Release Update**

          This update requires manual review due to potential breaking changes:
          - **Package**: ${{ needs.setup.outputs.dependency-names }}
          - **Version Change**: ${{ needs.setup.outputs.previous-version }} ‚Üí ${{ needs.setup.outputs.new-version }}
          - **Update Type**: ${{ needs.setup.outputs.update-type }}
          - **Semantic Release**: ${{ needs.setup.outputs.release-type }}

          Please review the changelog and test thoroughly before merging."
        env:
          PR_URL: ${{ github.event.pull_request.html_url }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # Wait for quality checks and auto-merge safe updates
  auto-merge:
    name: Auto-merge Safe Updates
    runs-on: ubuntu-latest
    if: github.actor == 'dependabot[bot]'
    needs: [setup, process-update]
    steps:
      - name: Wait for status checks
        if: needs.setup.outputs.should-auto-merge == 'true'
        uses: fountainhead/action-wait-for-check@v1.2.0
        id: wait-for-checks
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          checkName: 'Quality Gate'
          ref: ${{ github.event.pull_request.head.sha || github.sha }}
          timeoutSeconds: 1800 # 30 minutes
          intervalSeconds: 30

      - name: Auto-merge safe updates after checks pass
        if: |
          needs.setup.outputs.should-auto-merge == 'true' &&
          steps.wait-for-checks.outputs.conclusion == 'success' &&
          contains(github.event.pull_request.labels.*.name, 'auto-mergeable')
        run: |
          echo "üöÄ Auto-merging approved ${{ needs.setup.outputs.release-type }} update"
          gh pr merge --auto --squash "$PR_URL"
        env:
          PR_URL: ${{ github.event.pull_request.html_url }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Comment on failed checks
        if: |
          needs.setup.outputs.should-auto-merge == 'true' &&
          steps.wait-for-checks.outputs.conclusion == 'failure'
        run: |
          gh pr comment "$PR_URL" --body "‚ùå **Quality Checks Failed**

          The automated quality checks failed for this ${{ needs.setup.outputs.release-type }} dependency update:

          **Update Details:**
          - **Package**: ${{ needs.setup.outputs.dependency-names }}
          - **Version**: ${{ needs.setup.outputs.previous-version }} ‚Üí ${{ needs.setup.outputs.new-version }}
          - **Semantic Release**: ${{ needs.setup.outputs.release-type }}

          **Next Steps:**
          - Check the [Actions tab](${{ github.server_url }}/${{ github.repository }}/actions) for details
          - Review any test failures or linting issues
          - Consider if this update introduces compatibility issues

          Auto-merge has been disabled for this PR."
        env:
          PR_URL: ${{ github.event.pull_request.html_url }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # Summary and reporting job
  summary:
    runs-on: ubuntu-latest
    needs: [setup, process-update, wait-for-checks]
    if: always() && github.actor == 'dependabot[bot]'
    steps:
      - name: Generate summary
        run: |
          echo "## üìä Dependabot Update Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Package:** \`${{ needs.setup.outputs.dependency-names }}\`" >> $GITHUB_STEP_SUMMARY
          echo "**Version Change:** ${{ needs.setup.outputs.previous-version }} ‚Üí ${{ needs.setup.outputs.new-version }}" >> $GITHUB_STEP_SUMMARY
          echo "**Update Type:** ${{ needs.setup.outputs.update-type }}" >> $GITHUB_STEP_SUMMARY
          echo "**Semantic Release:** ${{ needs.setup.outputs.release-type }}" >> $GITHUB_STEP_SUMMARY
          echo "**Auto-merge Eligible:** ${{ needs.setup.outputs.should-auto-merge }}" >> $GITHUB_STEP_SUMMARY

          if [[ "${{ needs.setup.outputs.alert-state }}" == "OPEN" ]]; then
            echo "**Security Alert:** üîí Yes (CVSS: ${{ needs.setup.outputs.cvss }})" >> $GITHUB_STEP_SUMMARY
          else
            echo "**Security Alert:** ‚úÖ None" >> $GITHUB_STEP_SUMMARY
          fi

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Processing Results" >> $GITHUB_STEP_SUMMARY
          echo "- Labels applied: ‚úÖ" >> $GITHUB_STEP_SUMMARY

          if [[ "${{ needs.setup.outputs.should-auto-merge }}" == "true" ]]; then
            echo "- Auto-approval: ‚úÖ" >> $GITHUB_STEP_SUMMARY
            if [[ "${{ needs.wait-for-checks.result }}" == "success" ]]; then
              echo "- Quality checks: ‚úÖ" >> $GITHUB_STEP_SUMMARY
              echo "- Auto-merge: ‚úÖ" >> $GITHUB_STEP_SUMMARY
            else
              echo "- Quality checks: ‚ùå" >> $GITHUB_STEP_SUMMARY
              echo "- Auto-merge: ‚ùå (checks failed)" >> $GITHUB_STEP_SUMMARY
            fi
          else
            echo "- Auto-approval: ‚è≠Ô∏è Manual review required" >> $GITHUB_STEP_SUMMARY
            echo "- Auto-merge: ‚è≠Ô∏è Manual merge required" >> $GITHUB_STEP_SUMMARY
          fi
