// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

// User management and authentication
model User {
    id            String    @id @default(cuid())
    name          String?
    email         String    @unique
    emailVerified DateTime? @map("email_verified")
    image         String?
    createdAt     DateTime  @default(now()) @map("created_at")
    updatedAt     DateTime  @updatedAt @map("updated_at")

    accounts Account[]
    sessions Session[]

    @@map("users")
}

model Account {
    id                String  @id @default(cuid())
    userId            String  @map("user_id")
    type              String
    provider          String
    providerAccountId String  @map("provider_account_id")
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    @@map("accounts")
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique @map("session_token")
    userId       String   @map("user_id")
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@map("sessions")
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
    @@map("verification_tokens")
}

// Feature flags for A/B testing and gradual rollouts
model FeatureFlag {
    id          String   @id @default(cuid())
    key         String   @unique
    name        String
    description String?
    enabled     Boolean  @default(false)
    conditions  Json? // JSON object for complex conditions
    createdAt   DateTime @default(now()) @map("created_at")
    updatedAt   DateTime @updatedAt @map("updated_at")

    @@map("feature_flags")
}

// Health check logs for monitoring
model HealthCheck {
    id        String   @id @default(cuid())
    service   String
    status    String // "healthy", "degraded", "unhealthy"
    message   String?
    metadata  Json?
    timestamp DateTime @default(now())

    @@map("health_checks")
}
